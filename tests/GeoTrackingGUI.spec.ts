import { test, expect } from '@playwright/test';

test.beforeEach(async ({ page }, testInfo) => {
  console.log(`Running ${testInfo.title}`);
  await page.goto('https://mus.ph00a1.cz.infra/ui');
  expect(page.url()).toBe('https://sso.ph00a1.cz.infra/opensso/UI/Login?goto=https://mus.ph00a1.cz.infra/ui');
  await page.locator('#IDToken1').fill('much_tester');
  await page.locator('#IDToken1').press('Tab');
  await page.locator('#IDToken2').fill('much_tester');
  await page.getByRole('button', { name: 'Log In' }).click();
  await page.getByLabel('Menu').click();
});

test('GeoTracking GUI', async ({ page }) => {

  await expect(page.locator('#GEO_TRACKING')).toContainText('Geolocation tracking');
  await page.getByRole('menuitem', { name: 'Geolocation tracking' }).click();
  await expect(page.getByLabel('Toggle filter menu')).toBeVisible();
  await expect(page.getByLabel('Clear visit case filter')).toBeVisible();
  await expect(page.getByLabel('Search')).toBeVisible();
  await expect(page.getByLabel('Team\'s position')).toBeVisible();
  await expect(page.getByRole('radiogroup')).toContainText('Team\'s position');
  await expect(page.getByRole('complementary')).toContainText('Location');
  await expect(page.locator('#locationButton')).toContainText('Select location');
  await expect(page.getByRole('button', { name: 'Select location' })).toBeVisible();
  await page.getByRole('button', { name: 'Select location' }).click();
  await expect(page.locator('#location-dialog-title')).toContainText('Select location');
  await expect(page.getByRole('button', { name: '​', exact: true })).toBeVisible();
  await page.getByRole('button', { name: '​', exact: true }).click();
  await expect(page.getByRole('listbox')).toContainText('Choose location');
  await page.getByRole('option', { name: 'Choose location' }).click();
  await expect(page.getByRole('button', { name: 'Done' })).toBeVisible();
  await page.getByRole('button', { name: 'Done' }).click();
  await expect(page.getByRole('complementary')).toContainText('Team leader');
  await expect(page.locator('li').filter({ hasText: 'Team leader' }).getByRole('button')).toBeVisible();
  await page.locator('li').filter({ hasText: 'Team leader' }).getByRole('button').click();
  await expect(page.getByRole('listbox')).toContainText('Select team leader');
  await page.getByRole('option', { name: 'Select team leader' }).click();
  await expect(page.getByRole('complementary')).toContainText('Last result position limit');
  await expect(page.getByRole('checkbox')).toBeVisible();
  await page.getByRole('checkbox').check();
  await expect(page.getByRole('complementary')).toContainText('Position update limit (minutes)');
  await expect(page.getByRole('textbox')).toBeVisible();
  await page.getByRole('textbox').click();
  await page.getByRole('textbox').fill('10');
  await expect(page.getByRole('complementary')).toContainText('Auto refresh (minutes)');
  await expect(page.locator('li').filter({ hasText: 'Auto refresh (minutes)' }).getByRole('button')).toBeVisible();
  await page.locator('li').filter({ hasText: 'Auto refresh (minutes)' }).getByRole('button').click();
  await expect(page.getByRole('listbox')).toContainText('Disabled');
  await page.getByRole('option', { name: '5' }).click();
  await expect(page.getByLabel('Route')).toBeVisible();
  await expect(page.getByRole('radiogroup')).toContainText('Route');
  await page.getByLabel('Route').check();
  await expect(page.getByRole('list')).toContainText('Visitor');
  await expect(page.getByPlaceholder('Visitor')).toBeVisible();
  await page.getByPlaceholder('Visitor').click();
  await page.getByPlaceholder('Visitor').fill('muf_tester');
  await page.getByRole('menuitem', { name: 'muf_tester' }).click();
  await expect(page.getByRole('list')).toContainText('Date');
  await expect(page.locator('li').filter({ hasText: 'Date' }).getByRole('textbox')).toBeVisible();
  await expect(page.getByRole('list').locator('button')).toBeVisible();
  await page.getByRole('list').locator('button').click();
  await page.getByRole('button', { name: 'OK' }).click();
  await expect(page.getByRole('list')).toContainText('Planned vs. real location distance (meters)');
  await expect(page.locator('input[name="dailyRoute\\.distanceThreshold"]')).toHaveValue('100');
  await page.locator('input[name="dailyRoute\\.distanceThreshold"]').click();
  await page.locator('input[name="dailyRoute\\.distanceThreshold"]').fill('50');
  await expect(page.getByRole('list')).toContainText('Auto refresh (minutes)');
  await page.locator('li').filter({ hasText: 'Auto refresh (minutes)' }).getByRole('button').click();
  await expect(page.getByRole('listbox')).toContainText('Disabled');
  await page.getByRole('option', { name: '5' }).click();
  await page.getByLabel('Search').click();
  await expect(page.getByLabel('Route statistics')).toBeVisible();
  await page.getByLabel('Route statistics').click();
  await expect(page.locator('thead')).toContainText('Shift started');
  await expect(page.locator('thead')).toContainText('Shift ended');
  await expect(page.locator('thead')).toContainText('Travelled distance');
  await expect(page.getByRole('button', { name: 'Hide' })).toBeVisible();
  await page.getByRole('button', { name: 'Hide' }).click();
});